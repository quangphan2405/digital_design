<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 08:24:45 on 06/ 5/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t3_reg_sda_moore.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 22:09:13 06&#47; 1&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t3_reg_sda_moore <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color    : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rx_ready : <span class=A>IN</span>     <span class=T>std_logic</span>;
      bit_out  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      channel  : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      do_tx    : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      lat      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      x        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y        : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t3_reg_sda_moore ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t3_reg_sda_moore.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 22:09:13 06&#47; 1&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c5_t3_reg_sda_moore <span class=K>IS</span>

   <span class=C>-- Architecture Declarations</span>
   <span class=K>SIGNAL</span> bit_idx : <span class=T>integer</span> <span class=K>RANGE</span> 24 <span class=K>DOWNTO</span> 0;
   <span class=K>SIGNAL</span> channel_idx : <span class=T>integer</span> <span class=K>RANGE</span> 8 <span class=K>DOWNTO</span> 0;

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      init,
      px,
      inc_x,
      turn_off,
      toggle_lat,
      wait_for_lat,
      turn_on,
      wait_after_turn_on,
      inc_y,
      set_do_tx
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(12 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(12 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_wait_for_lat : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_wait_after_turn_on : <span class=T>std_logic</span>;

   <span class=C>-- Declare any pre-registered internal signals</span>
   <span class=K>SIGNAL</span> bit_out_cld : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> channel_cld : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> do_tx_cld : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> lat_cld : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> x_cld : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_cld : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= init;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
         <span class=C>-- Default Reset Values</span>
         bit_out_cld <= '0';
         channel_cld <= <span class=S>"00000000"</span>;
         do_tx_cld <= '0';
         lat_cld <= '0';
         x_cld <= <span class=S>"00000001"</span>;
         y_cld <= <span class=S>"00000001"</span>;
         bit_idx <= 0;
         channel_idx <= 0;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;

         <span class=C>-- Combined Actions</span>
         <span class=K>CASE</span> current_state <span class=K>IS</span>
            <span class=K>WHEN</span> init =>
               x_cld <= <span class=S>"00000001"</span>;
               y_cld <= <span class=S>"00000001"</span>;
               bit_idx <= 0;
               channel_idx <= 0;
               lat_cld <= '0';
               channel_cld <= <span class=S>"00000000"</span>;
               do_tx_cld <= '0';
            <span class=K>WHEN</span> px =>
               bit_out_cld <= color(23 - bit_idx);
               bit_idx <= bit_idx + 1;
            <span class=K>WHEN</span> inc_x =>
               x_cld<=x_cld(6 <span class=K>downto</span> 0)& '0';
               bit_idx <= 0;
            <span class=K>WHEN</span> turn_off =>
               channel_cld <= <span class=S>"00000000"</span>;
               bit_out_cld <= '0';
               do_tx_cld <= '0';
            <span class=K>WHEN</span> toggle_lat =>
               lat_cld <= '1';
            <span class=K>WHEN</span> turn_on =>
               channel_cld(channel_idx) <= '1';
               lat_cld <= '0';
            <span class=K>WHEN</span> inc_y =>
               y_cld<=y_cld(6 <span class=K>downto</span> 0)& '0';
               bit_idx <= 0;
               x_cld <= <span class=S>"00000001"</span>;
               channel_idx <= channel_idx + 1;
            <span class=K>WHEN</span> set_do_tx =>
               do_tx_cld <= '1';
            <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
               <span class=K>NULL</span>;
         <span class=K>END</span> <span class=K>CASE</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      bit_idx,
      channel_idx,
      csm_timeout,
      current_state,
      rx_ready,
      x_cld
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_wait_for_lat <= '0';
      csm_to_wait_after_turn_on <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> init =>
            <span class=K>IF</span> (rx_ready = '1') <span class=K>THEN</span>
               next_state <= px;
            <span class=K>ELSE</span>
               next_state <= init;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> px =>
            <span class=K>IF</span> (x_cld = <span class=S>"00000000"</span>) <span class=K>THEN</span>
               next_state <= turn_off;
            <span class=K>ELSIF</span> (bit_idx = 23) <span class=K>THEN</span>
               next_state <= inc_x;
            <span class=K>ELSIF</span> (bit_idx <23) <span class=K>THEN</span>
               next_state <= set_do_tx;
            <span class=K>ELSE</span>
               next_state <= px;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> inc_x =>
            next_state <= set_do_tx;
         <span class=K>WHEN</span> turn_off =>
            next_state <= wait_for_lat;
            csm_to_wait_for_lat <= '1';
         <span class=K>WHEN</span> toggle_lat =>
            next_state <= turn_on;
         <span class=K>WHEN</span> wait_for_lat =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= toggle_lat;
            <span class=K>ELSE</span>
               next_state <= wait_for_lat;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> turn_on =>
            next_state <= wait_after_turn_on;
            csm_to_wait_after_turn_on <= '1';
         <span class=K>WHEN</span> wait_after_turn_on =>
            <span class=K>IF</span> (csm_timeout = '1' <span class=K>AND</span> (channel_idx < 7)) <span class=K>THEN</span>
               next_state <= inc_y;
            <span class=K>ELSIF</span> (csm_timeout = '1' <span class=K>AND</span> (channel_idx = 7)) <span class=K>THEN</span>
               next_state <= init;
            <span class=K>ELSE</span>
               next_state <= wait_after_turn_on;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> inc_y =>
            next_state <= px;
         <span class=K>WHEN</span> set_do_tx =>
            <span class=K>IF</span> (rx_ready = '1') <span class=K>THEN</span>
               next_state <= px;
            <span class=K>ELSE</span>
               next_state <= set_do_tx;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= init;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_wait_for_lat,
      csm_to_wait_after_turn_on
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_wait_for_lat = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"1010101111011"</span>; <span class=C>-- no cycles(5500)-1=5499</span>
      <span class=K>ELSIF</span> (csm_to_wait_after_turn_on = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"0111111101000"</span>; <span class=C>-- no cycles(4073)-1=4072</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

   <span class=C>-- Concurrent Statements</span>
   <span class=C>-- Clocked output assignments</span>
   bit_out <= bit_out_cld;
   channel <= channel_cld;
   do_tx <= do_tx_cld;
   lat <= lat_cld;
   x <= x_cld;
   y <= y_cld;
<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
