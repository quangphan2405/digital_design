<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 08:24:41 on 06/ 5/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t2_col_of_row.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 18:01:59 05&#47;30&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t2_col_of_row <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      pixd_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      xr       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      xw       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      yr       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      yw       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      pixd_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t2_col_of_row ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t2_col_of_row.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 18:01:59 05&#47;30&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c5_t2_col_of_row <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> din0      : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout      : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout10    : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout11    : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout12    : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout13    : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout14    : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2     : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout3     : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout4     : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout5     : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout6     : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout7     : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout8     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout9     : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> pixd_out0 : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> pixd_out1 : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> pixd_out2 : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> pixd_out3 : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> pixd_out4 : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> pixd_out5 : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> pixd_out6 : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> pixd_out7 : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> sel0      : <span class=T>std_logic</span>;


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> c5_t2_row_px
   <span class=K>PORT</span> (
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      pixd_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      this_row : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      write    : <span class=A>IN</span>     <span class=T>std_logic</span> ;
      xr       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      xw       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      pixd_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : c5_t2_row_px <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.c5_t2_row_px;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_21' of 'and'</span>
   sel0 <= yr(0) <span class=K>AND</span> <span class=K>NOT</span>(write);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_22' of 'and'</span>
   dout2 <= yr(1) <span class=K>AND</span> <span class=K>NOT</span>(write);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_23' of 'and'</span>
   dout3 <= yr(2) <span class=K>AND</span> <span class=K>NOT</span>(write);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_24' of 'and'</span>
   dout4 <= yr(3) <span class=K>AND</span> <span class=K>NOT</span>(write);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_25' of 'and'</span>
   dout5 <= yr(4) <span class=K>AND</span> <span class=K>NOT</span>(write);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_26' of 'and'</span>
   dout6 <= yr(5) <span class=K>AND</span> <span class=K>NOT</span>(write);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_27' of 'and'</span>
   dout7 <= yr(6) <span class=K>AND</span> <span class=K>NOT</span>(write);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_28' of 'and'</span>
   dout14 <= yr(7) <span class=K>AND</span> <span class=K>NOT</span>(write);

   <span class=C>-- ModuleWare code(v1.12) for instance 'zeros' of 'constval'</span>
   din0 <= <span class=S>"000000000000000000000000"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_10' of 'mux'</span>
   u_10combo_proc: <span class=K>PROCESS</span>(din0, pixd_out0, sel0)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> sel0 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout <= din0;
      <span class=K>WHEN</span> '1' => dout <= pixd_out0;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_10combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_11' of 'mux'</span>
   u_11combo_proc: <span class=K>PROCESS</span>(dout, pixd_out1, dout2)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout2 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout8 <= dout;
      <span class=K>WHEN</span> '1' => dout8 <= pixd_out1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout8 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_11combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_12' of 'mux'</span>
   u_12combo_proc: <span class=K>PROCESS</span>(dout8, pixd_out2, dout3)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout3 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout9 <= dout8;
      <span class=K>WHEN</span> '1' => dout9 <= pixd_out2;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout9 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_12combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_13' of 'mux'</span>
   u_13combo_proc: <span class=K>PROCESS</span>(dout9, pixd_out3, dout4)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout4 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout10 <= dout9;
      <span class=K>WHEN</span> '1' => dout10 <= pixd_out3;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout10 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_13combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_14' of 'mux'</span>
   u_14combo_proc: <span class=K>PROCESS</span>(dout10, pixd_out4, dout5)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout5 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout11 <= dout10;
      <span class=K>WHEN</span> '1' => dout11 <= pixd_out4;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout11 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_14combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_15' of 'mux'</span>
   u_15combo_proc: <span class=K>PROCESS</span>(dout11, pixd_out5, dout6)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout6 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout12 <= dout11;
      <span class=K>WHEN</span> '1' => dout12 <= pixd_out5;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout12 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_15combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_16' of 'mux'</span>
   u_16combo_proc: <span class=K>PROCESS</span>(dout12, pixd_out6, dout7)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout7 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout13 <= dout12;
      <span class=K>WHEN</span> '1' => dout13 <= pixd_out6;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout13 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_16combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_17' of 'mux'</span>
   u_17combo_proc: <span class=K>PROCESS</span>(dout13, pixd_out7, dout14)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout14 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => pixd_out <= dout13;
      <span class=K>WHEN</span> '1' => pixd_out <= pixd_out7;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => pixd_out <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_17combo_proc;

   <span class=C>-- Instance port mappings.</span>
   U_0 : c5_t2_row_px
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         this_row => yw(0),
         write    => write,
         xr       => xr,
         xw       => xw,
         pixd_out => pixd_out0
      );
   U_1 : c5_t2_row_px
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         this_row => yw(1),
         write    => write,
         xr       => xr,
         xw       => xw,
         pixd_out => pixd_out1
      );
   U_2 : c5_t2_row_px
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         this_row => yw(2),
         write    => write,
         xr       => xr,
         xw       => xw,
         pixd_out => pixd_out2
      );
   U_3 : c5_t2_row_px
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         this_row => yw(3),
         write    => write,
         xr       => xr,
         xw       => xw,
         pixd_out => pixd_out3
      );
   U_4 : c5_t2_row_px
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         this_row => yw(4),
         write    => write,
         xr       => xr,
         xw       => xw,
         pixd_out => pixd_out4
      );
   U_5 : c5_t2_row_px
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         this_row => yw(5),
         write    => write,
         xr       => xr,
         xw       => xw,
         pixd_out => pixd_out5
      );
   U_6 : c5_t2_row_px
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         this_row => yw(6),
         write    => write,
         xr       => xr,
         xw       => xw,
         pixd_out => pixd_out6
      );
   U_7 : c5_t2_row_px
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         this_row => yw(7),
         write    => write,
         xr       => xr,
         xw       => xw,
         pixd_out => pixd_out7
      );

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
