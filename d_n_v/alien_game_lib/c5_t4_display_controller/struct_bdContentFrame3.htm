<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 08:24:46 on 06/ 5/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c5_t4_display_controller.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 07:42:04 06&#47; 5&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c5_t4_display_controller <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      frame_written : <span class=A>IN</span>     <span class=T>std_logic</span>;
      pixd_in       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      xw            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      yw            : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      channel       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      lat           : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_clk         : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_rst         : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_sda         : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      sb            : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      w_rdy         : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c5_t4_display_controller ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c5_t4_display_controller.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 07:42:04 06&#47; 5&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>LIBRARY</span> alien_game_lib;

<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c5_t4_display_controller <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> bit_c      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> bit_g      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> bit_in     : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> done       : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> lat_c      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> lat_g      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> pixd       : <span class=T>std_logic_vector</span>(23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> ready      : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> rx_ready   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> rx_ready_c : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> transmit   : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> tx_c       : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> tx_g       : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> xr         : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> yr         : <span class=T>std_logic_vector</span>(7 <span class=K>DOWNTO</span> 0);

   <span class=C>-- Implicit buffer signal declarations</span>
   <span class=K>SIGNAL</span> sb_internal : <span class=T>std_logic</span>;


   <span class=C>-- Component Declarations</span>
   <span class=K>COMPONENT</span> reg_bank
   <span class=K>PORT</span> (
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      pixd_in  : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      w_done   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      xr       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      xw       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      yr       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      yw       : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      pixd_out : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      w_rdy    : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> serial_led_cannon
   <span class=K>PORT</span> (
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      pixdata : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      run     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      bit_out : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      chans   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      lat     : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      tx      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      x       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y       : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> v2_gamma
   <span class=K>PORT</span> (
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      run     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      bit_out : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      sb      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      tx      : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> v2_rst
   <span class=K>PORT</span> (
      clk   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n : <span class=A>IN</span>     <span class=T>std_logic</span>;
      done  : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_rst : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;
   <span class=K>COMPONENT</span> v2_serial_tx
   <span class=K>PORT</span> (
      bit_in     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clk        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      run        : <span class=A>IN</span>     <span class=T>std_logic</span>;
      s_clk      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_sda      : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      zc1f6aeab5 : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );
   <span class=K>END</span> <span class=K>COMPONENT</span>;

   <span class=C>-- Optional embedded configurations</span>
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>FOR</span> <span class=K>ALL</span> : reg_bank <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.reg_bank;
   <span class=K>FOR</span> <span class=K>ALL</span> : serial_led_cannon <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.serial_led_cannon;
   <span class=K>FOR</span> <span class=K>ALL</span> : v2_gamma <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.v2_gamma;
   <span class=K>FOR</span> <span class=K>ALL</span> : v2_rst <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.v2_rst;
   <span class=K>FOR</span> <span class=K>ALL</span> : v2_serial_tx <span class=K>USE</span> <span class=K>ENTITY</span> alien_game_lib.v2_serial_tx;
   <span class=C>-- pragma synthesis_on</span>


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'and'</span>
   rx_ready <= done <span class=K>AND</span> ready;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_7' of 'and'</span>
   rx_ready_c <= ready <span class=K>AND</span> sb_internal;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_9' of 'constval'</span>
   lat_g <= '0';

   <span class=C>-- ModuleWare code(v1.12) for instance 'sel_tx_bit' of 'mux'</span>
   sel_tx_bitcombo_proc: <span class=K>PROCESS</span>(bit_g, bit_c, sb_internal)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> sb_internal <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => bit_in <= bit_g;
      <span class=K>WHEN</span> '1' => bit_in <= bit_c;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => bit_in <= 'X';
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> sel_tx_bitcombo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'or'</span>
   transmit <= tx_g <span class=K>OR</span> tx_c;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'or'</span>
   lat <= lat_g <span class=K>OR</span> lat_c;

   <span class=C>-- Instance port mappings.</span>
   U_1 : reg_bank
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk      => clk,
         pixd_in  => pixd_in,
         rst_n    => rst_n,
         w_done   => frame_written,
         write    => write,
         xr       => xr,
         xw       => xw,
         yr       => yr,
         yw       => yw,
         pixd_out => pixd,
         w_rdy    => w_rdy
      );
   U_2 : serial_led_cannon
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk     => clk,
         pixdata => pixd,
         rst_n   => rst_n,
         run     => rx_ready_c,
         bit_out => bit_c,
         chans   => channel,
         lat     => lat_c,
         tx      => tx_c,
         x       => xr,
         y       => yr
      );
   U_8 : v2_gamma
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk     => clk,
         rst_n   => rst_n,
         run     => rx_ready,
         bit_out => bit_g,
         sb      => sb_internal,
         tx      => tx_g
      );
   U_0 : v2_rst
      <span class=K>PORT</span> <span class=K>MAP</span> (
         clk   => clk,
         rst_n => rst_n,
         done  => done,
         s_rst => s_rst
      );
   U_3 : v2_serial_tx
      <span class=K>PORT</span> <span class=K>MAP</span> (
         bit_in     => bit_in,
         clk        => clk,
         rst_n      => rst_n,
         run        => transmit,
         zc1f6aeab5 => ready,
         s_clk      => s_clk,
         s_sda      => s_sda
      );

   <span class=C>-- Implicit buffered output assignments</span>
   sb <= sb_internal;

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
