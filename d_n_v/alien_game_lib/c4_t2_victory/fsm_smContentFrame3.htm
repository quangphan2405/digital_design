<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 15:44:10 on 05/29/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c4_t2_victory.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 10:43:02 05&#47;28&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c4_t2_victory <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      color   : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
      x_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      y_coord : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c4_t2_victory ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c4_t2_victory.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 10:43:02 05&#47;28&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c4_t2_victory <span class=K>IS</span>

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      px0,
      px1,
      px2,
      px3,
      px4,
      px5,
      px6,
      px7,
      px8,
      px9,
      px10,
      px11,
      px12,
      px13,
      px14,
      px15,
      px16
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

   <span class=C>-- Declare any pre-registered internal signals</span>
   <span class=K>SIGNAL</span> color_int : <span class=T>std_logic_vector</span> (23 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> x_coord_int : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> y_coord_int : <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= px0;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         <span class=C>-- Registered output assignments</span>
         color <= color_int;
         x_coord <= x_coord_int;
         y_coord <= y_coord_int;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> px0 =>
            next_state <= px1;
         <span class=K>WHEN</span> px1 =>
            next_state <= px2;
         <span class=K>WHEN</span> px2 =>
            next_state <= px3;
         <span class=K>WHEN</span> px3 =>
            next_state <= px4;
         <span class=K>WHEN</span> px4 =>
            next_state <= px5;
         <span class=K>WHEN</span> px5 =>
            next_state <= px6;
         <span class=K>WHEN</span> px6 =>
            next_state <= px7;
         <span class=K>WHEN</span> px7 =>
            next_state <= px8;
         <span class=K>WHEN</span> px8 =>
            next_state <= px9;
         <span class=K>WHEN</span> px9 =>
            next_state <= px10;
         <span class=K>WHEN</span> px10 =>
            next_state <= px11;
         <span class=K>WHEN</span> px11 =>
            next_state <= px12;
         <span class=K>WHEN</span> px12 =>
            next_state <= px13;
         <span class=K>WHEN</span> px13 =>
            next_state <= px14;
         <span class=K>WHEN</span> px14 =>
            next_state <= px15;
         <span class=K>WHEN</span> px15 =>
            next_state <= px16;
         <span class=K>WHEN</span> px16 =>
            next_state <= px0;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= px0;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      color_int <= <span class=S>"100101100000000010010110"</span>;
      x_coord_int <= <span class=S>"00001000"</span>;
      y_coord_int <= <span class=S>"00000001"</span>;

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> px0 =>
            x_coord_int <= <span class=S>"00001000"</span>;
            y_coord_int <= <span class=S>"00000001"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px1 =>
            x_coord_int <= <span class=S>"00000100"</span>;
            y_coord_int <= <span class=S>"00000010"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px2 =>
            x_coord_int <= <span class=S>"00000010"</span>;
            y_coord_int <= <span class=S>"00000100"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px3 =>
            x_coord_int <= <span class=S>"00000010"</span>;
            y_coord_int <= <span class=S>"00001000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px4 =>
            x_coord_int <= <span class=S>"00000100"</span>;
            y_coord_int <= <span class=S>"00001000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px5 =>
            x_coord_int <= <span class=S>"00001000"</span>;
            y_coord_int <= <span class=S>"00001000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px6 =>
            x_coord_int <= <span class=S>"00010000"</span>;
            y_coord_int <= <span class=S>"00001000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px7 =>
            x_coord_int <= <span class=S>"00100000"</span>;
            y_coord_int <= <span class=S>"00001000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px8 =>
            x_coord_int <= <span class=S>"01000000"</span>;
            y_coord_int <= <span class=S>"00001000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px9 =>
            x_coord_int <= <span class=S>"00010000"</span>;
            y_coord_int <= <span class=S>"00010000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px10 =>
            x_coord_int <= <span class=S>"00010000"</span>;
            y_coord_int <= <span class=S>"00100000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px11 =>
            x_coord_int <= <span class=S>"10000000"</span>;
            y_coord_int <= <span class=S>"00001000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px12 =>
            x_coord_int <= <span class=S>"10000000"</span>;
            y_coord_int <= <span class=S>"00010000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px13 =>
            x_coord_int <= <span class=S>"10000000"</span>;
            y_coord_int <= <span class=S>"00100000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px14 =>
            x_coord_int <= <span class=S>"01000000"</span>;
            y_coord_int <= <span class=S>"01000000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px15 =>
            x_coord_int <= <span class=S>"00100000"</span>;
            y_coord_int <= <span class=S>"10000000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> px16 =>
            x_coord_int <= <span class=S>"00010000"</span>;
            y_coord_int <= <span class=S>"10000000"</span>;
            color_int <= <span class=S>"100101100000000010010110"</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
