<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 15:44:05 on 05/29/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c3_t2_write_sequencer.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 16:32:33 05&#47;18&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c3_t2_write_sequencer <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk           : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n         : <span class=A>IN</span>     <span class=T>std_logic</span>;
      write_ready   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable        : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      frame_done    : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      gun_px_idx    : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      module_select : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
      write         : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c3_t2_write_sequencer ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c3_t2_write_sequencer.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 14:05:03 05&#47;27&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c3_t2_write_sequencer <span class=K>IS</span>

   <span class=C>-- Architecture Declarations</span>
   <span class=K>SIGNAL</span> counter : <span class=T>integer</span> <span class=K>RANGE</span> 2 <span class=K>DOWNTO</span> 0;
   <span class=K>SIGNAL</span> delay : <span class=T>std_logic</span>;

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      init,
      write_alien,
      write_px_00,
      write_px_01,
      write_px_10,
      write_px_11,
      frame_finished,
      en,
      wait_for_delay
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;
   <span class=C>-- pragma synthesis_off</span>
   <span class=K>SIGNAL</span> hds_next,hds_current,hds_clock: <span class=T>INTEGER</span>;
   <span class=C>-- pragma synthesis_on</span>

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(13 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(13 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_wait_for_delay : <span class=T>std_logic</span>;

   <span class=C>-- Declare any pre-registered internal signals</span>
   <span class=K>SIGNAL</span> enable_int : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> frame_done_int : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> gun_px_idx_int : <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> module_select_int : <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> write_int : <span class=T>std_logic</span> ;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= init;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
         <span class=C>-- Default Reset Values</span>
         gun_px_idx <= <span class=S>"00"</span>;
         module_select <= <span class=S>"00"</span>;
         <span class=C>-- pragma synthesis_off</span>
         hds_current <= 0;
         <span class=C>-- pragma synthesis_on</span>
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         <span class=C>-- pragma synthesis_off</span>
         hds_current <= hds_next;
         hds_clock <= -1;
         hds_clock <= 0;
         <span class=C>-- pragma synthesis_on</span>
         <span class=C>-- Registered output assignments</span>
         enable <= enable_int;
         frame_done <= frame_done_int;
         gun_px_idx <= gun_px_idx_int;
         module_select <= module_select_int;
         write <= write_int;
         <span class=C>-- Default Assignment To Internals</span>
         counter <= 0;
         delay <= '0';

         <span class=C>-- Combined Actions</span>
         <span class=K>CASE</span> current_state <span class=K>IS</span>
            <span class=K>WHEN</span> write_alien =>
               <span class=K>IF</span> (counter < 1) <span class=K>THEN</span>
                  counter <= counter + 1;
               <span class=K>ELSIF</span> (write_ready = '1') <span class=K>THEN</span>
                  counter <= 0;
               <span class=K>END</span> <span class=K>IF</span>;
            <span class=K>WHEN</span> write_px_11 =>
               <span class=K>IF</span> (write_ready = '1' <span class=K>AND</span> counter = 1) <span class=K>THEN</span>
               <span class=K>ELSIF</span> (write_ready = '0' <span class=K>AND</span> counter = 1) <span class=K>THEN</span>
               <span class=K>ELSIF</span> (counter < 1) <span class=K>THEN</span>
                  counter <= counter + 1;
               <span class=K>END</span> <span class=K>IF</span>;
            <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
               <span class=K>NULL</span>;
         <span class=K>END</span> <span class=K>CASE</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      counter,
      csm_timeout,
      current_state,
      delay,
      write_ready
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_wait_for_delay <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> init =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= write_alien;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 1;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= init;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_alien =>
            <span class=K>IF</span> (counter < 1) <span class=K>THEN</span>
               next_state <= write_alien;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 2;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= write_px_00;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 3;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= write_alien;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_px_00 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= write_px_01;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 4;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (write_ready = '0') <span class=K>THEN</span>
               next_state <= write_px_00;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 5;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= write_px_00;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_px_01 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= write_px_10;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 6;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (write_ready = '0') <span class=K>THEN</span>
               next_state <= write_px_01;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 7;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= write_px_01;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_px_10 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= write_px_11;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 8;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (write_ready = '0') <span class=K>THEN</span>
               next_state <= write_px_10;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 9;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= write_px_10;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_px_11 =>
            <span class=K>IF</span> (write_ready = '1' <span class=K>AND</span> counter = 1) <span class=K>THEN</span>
               next_state <= frame_finished;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 10;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (write_ready = '0' <span class=K>AND</span> counter = 1) <span class=K>THEN</span>
               next_state <= write_px_11;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 11;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (counter < 1) <span class=K>THEN</span>
               next_state <= write_px_11;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 12;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= write_px_11;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> frame_finished =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               next_state <= en;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 13;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (write_ready = '0') <span class=K>THEN</span>
               next_state <= frame_finished;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 14;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= frame_finished;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> en =>
            <span class=K>IF</span> (delay = '0') <span class=K>THEN</span>
               next_state <= wait_for_delay;
               csm_to_wait_for_delay <= '1';
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 15;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSIF</span> (delay = '1') <span class=K>THEN</span>
               next_state <= init;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 16;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= en;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> wait_for_delay =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= init;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 17;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>ELSE</span>
               next_state <= wait_for_delay;
               <span class=C>-- pragma synthesis_off</span>
               hds_next <= 0;
               <span class=C>-- pragma synthesis_on</span>
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= init;
            <span class=C>-- pragma synthesis_off</span>
            hds_next <= 0;
            <span class=C>-- pragma synthesis_on</span>
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      counter,
      current_state,
      write_ready
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      enable_int <= '0';
      frame_done_int <= '0';
      gun_px_idx_int <= <span class=S>"UU"</span>;
      module_select_int <= <span class=S>"UU"</span>;
      write_int <= '0';

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> init =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               module_select_int <= <span class=S>"00"</span>;
               write_int <= '1';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_alien =>
            <span class=K>IF</span> (counter < 1) <span class=K>THEN</span>
               write_int <= '0';
            <span class=K>ELSIF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx_int <= <span class=S>"00"</span>;
               write_int <= '1';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_px_00 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx_int <= <span class=S>"01"</span>;
               write_int <= '1';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_px_01 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx_int <= <span class=S>"10"</span>;
               write_int <= '1';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_px_10 =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               gun_px_idx_int <= <span class=S>"11"</span>;
               write_int <= '1';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> write_px_11 =>
            <span class=K>IF</span> (write_ready = '1' <span class=K>AND</span> counter = 1) <span class=K>THEN</span>
               module_select_int <= <span class=S>"00"</span>;
               frame_done_int <= '1';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> frame_finished =>
            <span class=K>IF</span> (write_ready = '1') <span class=K>THEN</span>
               enable_int <= '1';
               frame_done_int <= '0';
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_wait_for_delay
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_wait_for_delay = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"10011100001111"</span>; <span class=C>-- no cycles(10000)-1=9999</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
