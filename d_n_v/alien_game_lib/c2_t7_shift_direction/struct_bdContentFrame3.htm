<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 18:34:52 on 02/23/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c2_t7_shift_direction.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 23:44:28 02&#47;22&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c2_t7_shift_direction <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk     : <span class=A>IN</span>     <span class=T>std_logic</span>;
      enable  : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      x_coord : <span class=A>IN</span>     <span class=T>std_logic_vector</span> (7 <span class=K>DOWNTO</span> 0);
      dir     : <span class=A>OUT</span>    <span class=T>std_logic_vector</span> (1 <span class=K>DOWNTO</span> 0)
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c2_t7_shift_direction ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c2_t7_shift_direction.struct</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 23:44:28 02&#47;22&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;


<span class=K>ARCHITECTURE</span> struct <span class=K>OF</span> c2_t7_shift_direction <span class=K>IS</span>

   <span class=C>-- Architecture declarations</span>

   <span class=C>-- Internal signal declarations</span>
   <span class=K>SIGNAL</span> dout  : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout1 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout2 : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> dout3 : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> dout4 : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q     : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> q1    : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> qb    : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> qb1   : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);


   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_0reg_cval : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);

   <span class=C>-- ModuleWare signal declarations(v1.12) for instance 'U_6' of 'adff'</span>
   <span class=K>SIGNAL</span> mw_U_6reg_cval : <span class=T>std_logic_vector</span>(1 <span class=K>DOWNTO</span> 0);


<span class=K>BEGIN</span>

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_0' of 'adff'</span>
   q <= mw_U_0reg_cval;
   qb <= <span class=K>NOT</span>(mw_U_0reg_cval);
   u_0seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_0reg_cval <= <span class=S>"10"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_0reg_cval <= dout2;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_0seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_6' of 'adff'</span>
   q1 <= mw_U_6reg_cval;
   qb1 <= <span class=K>NOT</span>(mw_U_6reg_cval);
   u_6seq_proc: <span class=K>PROCESS</span> (clk, rst_n)
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         mw_U_6reg_cval <= <span class=S>"10"</span>;
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk='1') <span class=K>THEN</span>
         mw_U_6reg_cval <= q;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_6seq_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'const_00' of 'constval'</span>
   dout <= <span class=S>"00"</span>;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_1' of 'mux'</span>
   u_1combo_proc: <span class=K>PROCESS</span>(dout, dout4, enable)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> enable <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dir <= dout;
      <span class=K>WHEN</span> '1' => dir <= dout4;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dir <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_1combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_2' of 'mux'</span>
   u_2combo_proc: <span class=K>PROCESS</span>(q, qb, dout1)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout1 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout2 <= q;
      <span class=K>WHEN</span> '1' => dout2 <= qb;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout2 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_2combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_5' of 'mux'</span>
   u_5combo_proc: <span class=K>PROCESS</span>(q1, qb1, dout3)
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> dout3 <span class=K>IS</span>
      <span class=K>WHEN</span> '0' => dout4 <= q1;
      <span class=K>WHEN</span> '1' => dout4 <= qb1;
      <span class=K>WHEN</span> <span class=K>OTHERS</span> => dout4 <= (<span class=K>OTHERS</span> => 'X');
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> u_5combo_proc;

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_3' of 'or'</span>
   dout1 <= x_coord(6) <span class=K>OR</span> x_coord(1);

   <span class=C>-- ModuleWare code(v1.12) for instance 'U_4' of 'or'</span>
   dout3 <= x_coord(6) <span class=K>OR</span> x_coord(1);

   <span class=C>-- Instance port mappings.</span>

<span class=K>END</span> struct;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
