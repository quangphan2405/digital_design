<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 08:24:37 on 06/ 5/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c4_t3_hit_controller.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 22:04:41 06&#47; 4&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c4_t3_hit_controller <span class=K>IS</span>
   <span class=K>PORT</span>(
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      hit      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      defeated : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      hit_once : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c4_t3_hit_controller ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c4_t3_hit_controller.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 22:04:41 06&#47; 4&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c4_t3_hit_controller <span class=K>IS</span>

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      init,
      once,
      s0
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

   <span class=C>-- Declare any pre-registered internal signals</span>
   <span class=K>SIGNAL</span> defeated_cld : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> hit_once_cld : <span class=T>std_logic</span> ;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= init;
         <span class=C>-- Default Reset Values</span>
         defeated_cld <= '0';
         hit_once_cld <= '0';
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;

         <span class=C>-- Combined Actions</span>
         <span class=K>CASE</span> current_state <span class=K>IS</span>
            <span class=K>WHEN</span> init =>
               <span class=K>IF</span> (hit = '1') <span class=K>THEN</span>
                  hit_once_cld <= '1';
               <span class=K>END</span> <span class=K>IF</span>;
            <span class=K>WHEN</span> once =>
               <span class=K>IF</span> (hit = '0') <span class=K>THEN</span>
               <span class=K>ELSIF</span> (hit = '1') <span class=K>THEN</span>
                  hit_once_cld <= '0';
                  defeated_cld <= '1';
               <span class=K>END</span> <span class=K>IF</span>;
            <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
               <span class=K>NULL</span>;
         <span class=K>END</span> <span class=K>CASE</span>;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      current_state,
      hit
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> init =>
            <span class=K>IF</span> (hit = '1') <span class=K>THEN</span>
               next_state <= once;
            <span class=K>ELSIF</span> (hit = '0') <span class=K>THEN</span>
               next_state <= init;
            <span class=K>ELSE</span>
               next_state <= init;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> once =>
            <span class=K>IF</span> (hit = '0') <span class=K>THEN</span>
               next_state <= once;
            <span class=K>ELSIF</span> (hit = '1') <span class=K>THEN</span>
               next_state <= s0;
            <span class=K>ELSE</span>
               next_state <= once;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s0 =>
            next_state <= s0;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= init;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-- Concurrent Statements</span>
   <span class=C>-- Clocked output assignments</span>
   defeated <= defeated_cld;
   hit_once <= hit_once_cld;
<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
