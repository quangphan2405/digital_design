<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head>
<title></title>
<link rel="Stylesheet" title="hdl2html stylesheet" media="Screen" href="../../scripts/hdl2html.css">
<!-- Generated by HDL Designer -->
<!--    at 15:44:13 on 05/29/2020 -->
<script language='javascript'>
function pagesBtn() {
   return '';
}
function panelmenu() {
   return '';
}
</script>
</head>
<body>
<pre>
<span class=C>-- VHDL Entity alien_game_lib.c4_t5_serial_data.symbol</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 22:11:44 05&#47;28&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ENTITY</span> c4_t5_serial_data <span class=K>IS</span>
   <span class=K>PORT</span>(
      bit_in   : <span class=A>IN</span>     <span class=T>std_logic</span>;
      clk      : <span class=A>IN</span>     <span class=T>std_logic</span>;
      rst_n    : <span class=A>IN</span>     <span class=T>std_logic</span>;
      transmit : <span class=A>IN</span>     <span class=T>std_logic</span>;
      ready    : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_clk    : <span class=A>OUT</span>    <span class=T>std_logic</span>;
      s_sda    : <span class=A>OUT</span>    <span class=T>std_logic</span>
   );

<span class=C>-- Declarations</span>

<span class=K>END</span> c4_t5_serial_data ;

<span class=C>--</span>
<span class=C>-- VHDL Architecture alien_game_lib.c4_t5_serial_data.fsm</span>
<span class=C>--</span>
<span class=C>-- Created:</span>
<span class=C>--          by - USER.UNKNOWN (QUANG-PHAN)</span>
<span class=C>--          at - 15:36:53 05&#47;29&#47;2020</span>
<span class=C>--</span>
<span class=C>-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)</span>
<span class=C>--</span>
<span class=K>LIBRARY</span> ieee;
<span class=K>USE</span> ieee.std_logic_1164.<span class=K>all</span>;
<span class=K>USE</span> ieee.std_logic_arith.<span class=K>all</span>;

<span class=K>ARCHITECTURE</span> fsm <span class=K>OF</span> c4_t5_serial_data <span class=K>IS</span>

   <span class=C>-- Architecture Declarations</span>
   <span class=K>SIGNAL</span> counter : <span class=T>integer</span> <span class=K>RANGE</span> 2 <span class=K>DOWNTO</span> 0;

   <span class=K>TYPE</span> STATE_TYPE <span class=K>IS</span> (
      init,
      ready_low,
      s_clk_low,
      s_clk_high
   );

   <span class=C>-- Declare current and next state signals</span>
   <span class=K>SIGNAL</span> current_state : STATE_TYPE;
   <span class=K>SIGNAL</span> next_state : STATE_TYPE;

   <span class=C>-- Declare Wait State internal signals</span>
   <span class=K>SIGNAL</span> csm_timer : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_next_timer : <span class=T>std_logic_vector</span>(2 <span class=K>DOWNTO</span> 0);
   <span class=K>SIGNAL</span> csm_timeout : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_s_clk_low : <span class=T>std_logic</span>;
   <span class=K>SIGNAL</span> csm_to_s_clk_high : <span class=T>std_logic</span>;

   <span class=C>-- Declare any pre-registered internal signals</span>
   <span class=K>SIGNAL</span> ready_int : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> s_clk_int : <span class=T>std_logic</span> ;
   <span class=K>SIGNAL</span> s_sda_int : <span class=T>std_logic</span> ;

<span class=K>BEGIN</span>

   <span class=C>-----------------------------------------------------------------</span>
   clocked_proc : <span class=K>PROCESS</span> (
      clk,
      rst_n
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (rst_n = '0') <span class=K>THEN</span>
         current_state <= init;
         csm_timer <= (<span class=K>OTHERS</span> => '0');
      <span class=K>ELSIF</span> (clk'<span class=A>EVENT</span> <span class=K>AND</span> clk = '1') <span class=K>THEN</span>
         current_state <= next_state;
         csm_timer <= csm_next_timer;
         <span class=C>-- Registered output assignments</span>
         ready <= ready_int;
         s_clk <= s_clk_int;
         s_sda <= s_sda_int;
         <span class=C>-- Default Assignment To Internals</span>
         counter <= 0;
      <span class=K>END</span> <span class=K>IF</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> clocked_proc;

   <span class=C>-----------------------------------------------------------------</span>
   nextstate_proc : <span class=K>PROCESS</span> (
      csm_timeout,
      current_state,
      transmit
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default assignments to Wait State entry flags</span>
      csm_to_s_clk_low <= '0';
      csm_to_s_clk_high <= '0';
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> init =>
            <span class=K>IF</span> (transmit = '0') <span class=K>THEN</span>
               next_state <= init;
            <span class=K>ELSIF</span> (transmit = '1') <span class=K>THEN</span>
               next_state <= ready_low;
            <span class=K>ELSE</span>
               next_state <= init;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> ready_low =>
            next_state <= s_clk_low;
            csm_to_s_clk_low <= '1';
         <span class=K>WHEN</span> s_clk_low =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= s_clk_high;
               csm_to_s_clk_high <= '1';
            <span class=K>ELSE</span>
               next_state <= s_clk_low;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> s_clk_high =>
            <span class=K>IF</span> (csm_timeout = '1') <span class=K>THEN</span>
               next_state <= init;
            <span class=K>ELSE</span>
               next_state <= s_clk_high;
            <span class=K>END</span> <span class=K>IF</span>;
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            next_state <= init;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> nextstate_proc;

   <span class=C>-----------------------------------------------------------------</span>
   output_proc : <span class=K>PROCESS</span> (
      bit_in,
      current_state
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>BEGIN</span>
      <span class=C>-- Default Assignment</span>
      ready_int <= '1';
      s_clk_int <= '1';
      s_sda_int <= '0';

      <span class=C>-- Combined Actions</span>
      <span class=K>CASE</span> current_state <span class=K>IS</span>
         <span class=K>WHEN</span> ready_low =>
            ready_int <= '0';
         <span class=K>WHEN</span> s_clk_low =>
            s_sda_int <= bit_in;
            s_clk_int <= '0';
            ready_int <= '1';
         <span class=K>WHEN</span> s_clk_high =>
            s_sda_int <= bit_in;
            s_clk_int <= '1';
            ready_int <= '1';
         <span class=K>WHEN</span> <span class=K>OTHERS</span> =>
            <span class=K>NULL</span>;
      <span class=K>END</span> <span class=K>CASE</span>;
   <span class=K>END</span> <span class=K>PROCESS</span> output_proc;

   <span class=C>-----------------------------------------------------------------</span>
   csm_wait_combo_proc: <span class=K>PROCESS</span> (
      csm_timer,
      csm_to_s_clk_low,
      csm_to_s_clk_high
   )
   <span class=C>-----------------------------------------------------------------</span>
   <span class=K>VARIABLE</span> csm_temp_timeout : <span class=T>std_logic</span>;
   <span class=K>BEGIN</span>
      <span class=K>IF</span> (unsigned(csm_timer) = 0) <span class=K>THEN</span>
         csm_temp_timeout := '1';
      <span class=K>ELSE</span>
         csm_temp_timeout := '0';
      <span class=K>END</span> <span class=K>IF</span>;

      <span class=K>IF</span> (csm_to_s_clk_low = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"011"</span>; <span class=C>-- no cycles(4)-1=3</span>
      <span class=K>ELSIF</span> (csm_to_s_clk_high = '1') <span class=K>THEN</span>
         csm_next_timer <= <span class=S>"001"</span>; <span class=C>-- no cycles(2)-1=1</span>
      <span class=K>ELSE</span>
         <span class=K>IF</span> (csm_temp_timeout = '1') <span class=K>THEN</span>
            csm_next_timer <= (<span class=K>OTHERS</span>=>'0');
         <span class=K>ELSE</span>
            csm_next_timer <= unsigned(csm_timer) - '1';
         <span class=K>END</span> <span class=K>IF</span>;
      <span class=K>END</span> <span class=K>IF</span>;
      csm_timeout <= csm_temp_timeout;
   <span class=K>END</span> <span class=K>PROCESS</span> csm_wait_combo_proc;

<span class=K>END</span> fsm;</pre>
<SCRIPT SRC="../../scripts/is.js"></SCRIPT><SCRIPT SRC="../../scripts/imageFrame.js"></SCRIPT>
</body>
