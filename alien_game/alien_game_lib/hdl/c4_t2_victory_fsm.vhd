-- VHDL Entity alien_game_lib.c4_t2_victory.symbol
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 23:03:40 06/ 4/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c4_t2_victory IS
   PORT( 
      clk     : IN     std_logic;
      px_idx  : IN     std_logic_vector (4 DOWNTO 0);
      rst_n   : IN     std_logic;
      color   : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END c4_t2_victory ;

--
-- VHDL Architecture alien_game_lib.c4_t2_victory.fsm
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 23:03:40 06/ 4/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c4_t2_victory IS

   TYPE STATE_TYPE IS (
      px0,
      px1,
      px2,
      px3,
      px4,
      px5,
      px6,
      px7,
      px8,
      px9,
      px10,
      px11,
      px12,
      px13,
      px14,
      px15,
      px16
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL color_int : std_logic_vector (23 DOWNTO 0);
   SIGNAL x_coord_int : std_logic_vector (7 DOWNTO 0);
   SIGNAL y_coord_int : std_logic_vector (7 DOWNTO 0);

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= px0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         -- Registered output assignments
         color <= color_int;
         x_coord <= x_coord_int;
         y_coord <= y_coord_int;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      px_idx
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN px0 => 
            IF (px_idx = "00001") THEN 
               next_state <= px1;
            ELSE
               next_state <= px0;
            END IF;
         WHEN px1 => 
            IF (px_idx = "00010") THEN 
               next_state <= px2;
            ELSE
               next_state <= px1;
            END IF;
         WHEN px2 => 
            IF (px_idx = "00011") THEN 
               next_state <= px3;
            ELSE
               next_state <= px2;
            END IF;
         WHEN px3 => 
            IF (px_idx = "00100") THEN 
               next_state <= px4;
            ELSE
               next_state <= px3;
            END IF;
         WHEN px4 => 
            IF (px_idx = "00101") THEN 
               next_state <= px5;
            ELSE
               next_state <= px4;
            END IF;
         WHEN px5 => 
            IF (px_idx = "00110") THEN 
               next_state <= px6;
            ELSE
               next_state <= px5;
            END IF;
         WHEN px6 => 
            IF (px_idx = "00111") THEN 
               next_state <= px7;
            ELSE
               next_state <= px6;
            END IF;
         WHEN px7 => 
            IF (px_idx = "01000") THEN 
               next_state <= px8;
            ELSE
               next_state <= px7;
            END IF;
         WHEN px8 => 
            IF (px_idx = "01001") THEN 
               next_state <= px9;
            ELSE
               next_state <= px8;
            END IF;
         WHEN px9 => 
            IF (px_idx = "01010") THEN 
               next_state <= px10;
            ELSE
               next_state <= px9;
            END IF;
         WHEN px10 => 
            IF (px_idx = "01011") THEN 
               next_state <= px11;
            ELSE
               next_state <= px10;
            END IF;
         WHEN px11 => 
            IF (px_idx = "01100") THEN 
               next_state <= px12;
            ELSE
               next_state <= px11;
            END IF;
         WHEN px12 => 
            IF (px_idx = "01101") THEN 
               next_state <= px13;
            ELSE
               next_state <= px12;
            END IF;
         WHEN px13 => 
            IF (px_idx = "01110") THEN 
               next_state <= px14;
            ELSE
               next_state <= px13;
            END IF;
         WHEN px14 => 
            IF (px_idx = "01111") THEN 
               next_state <= px15;
            ELSE
               next_state <= px14;
            END IF;
         WHEN px15 => 
            IF (px_idx = "10000") THEN 
               next_state <= px16;
            ELSE
               next_state <= px15;
            END IF;
         WHEN px16 => 
            next_state <= px0;
         WHEN OTHERS =>
            next_state <= px0;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      color_int <= "100101100000000010010110";
      x_coord_int <= "00001000";
      y_coord_int <= "00000001";

      -- Combined Actions
      CASE current_state IS
         WHEN px0 => 
            x_coord_int <= "00001000";
            y_coord_int <= "00000001";
            color_int <= "100101100000000010010110";
         WHEN px1 => 
            x_coord_int <= "00000100";
            y_coord_int <= "00000010";
            color_int <= "100101100000000010010110";
         WHEN px2 => 
            x_coord_int <= "00000010";
            y_coord_int <= "00000100";
            color_int <= "100101100000000010010110";
         WHEN px3 => 
            x_coord_int <= "00000010";
            y_coord_int <= "00001000";
            color_int <= "100101100000000010010110";
         WHEN px4 => 
            x_coord_int <= "00000100";
            y_coord_int <= "00001000";
            color_int <= "100101100000000010010110";
         WHEN px5 => 
            x_coord_int <= "00001000";
            y_coord_int <= "00001000";
            color_int <= "100101100000000010010110";
         WHEN px6 => 
            x_coord_int <= "00010000";
            y_coord_int <= "00001000";
            color_int <= "100101100000000010010110";
         WHEN px7 => 
            x_coord_int <= "00100000";
            y_coord_int <= "00001000";
            color_int <= "100101100000000010010110";
         WHEN px8 => 
            x_coord_int <= "01000000";
            y_coord_int <= "00001000";
            color_int <= "100101100000000010010110";
         WHEN px9 => 
            x_coord_int <= "00010000";
            y_coord_int <= "00010000";
            color_int <= "100101100000000010010110";
         WHEN px10 => 
            x_coord_int <= "00010000";
            y_coord_int <= "00100000";
            color_int <= "100101100000000010010110";
         WHEN px11 => 
            x_coord_int <= "10000000";
            y_coord_int <= "00001000";
            color_int <= "100101100000000010010110";
         WHEN px12 => 
            x_coord_int <= "10000000";
            y_coord_int <= "00010000";
            color_int <= "100101100000000010010110";
         WHEN px13 => 
            x_coord_int <= "10000000";
            y_coord_int <= "00100000";
            color_int <= "100101100000000010010110";
         WHEN px14 => 
            x_coord_int <= "01000000";
            y_coord_int <= "01000000";
            color_int <= "100101100000000010010110";
         WHEN px15 => 
            x_coord_int <= "00100000";
            y_coord_int <= "10000000";
            color_int <= "100101100000000010010110";
         WHEN px16 => 
            x_coord_int <= "00010000";
            y_coord_int <= "10000000";
            color_int <= "100101100000000010010110";
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
