-- VHDL Entity alien_game_lib.c4_t5_serial_data.symbol
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 22:11:44 05/28/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c4_t5_serial_data IS
   PORT( 
      bit_in   : IN     std_logic;
      clk      : IN     std_logic;
      rst_n    : IN     std_logic;
      transmit : IN     std_logic;
      ready    : OUT    std_logic;
      s_clk    : OUT    std_logic;
      s_sda    : OUT    std_logic
   );

-- Declarations

END c4_t5_serial_data ;

--
-- VHDL Architecture alien_game_lib.c4_t5_serial_data.fsm
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 10:07:21 05/29/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c4_t5_serial_data IS

   -- Architecture Declarations
   SIGNAL counter : integer RANGE 2 DOWNTO 0;  

   TYPE STATE_TYPE IS (
      init,
      keep_ready,
      capture_bit_in,
      s_clk_low,
      s_clk_high
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL ready_int : std_logic ;
   SIGNAL s_clk_int : std_logic ;
   SIGNAL s_sda_int : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= init;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         -- Registered output assignments
         ready <= ready_int;
         s_clk <= s_clk_int;
         s_sda <= s_sda_int;

         -- Combined Actions
         CASE current_state IS
            WHEN s_clk_low => 
               IF (counter < 1) THEN 
                  counter <= counter + 1;
               ELSIF (counter = 1) THEN 
                  counter <= 0;
               END IF;
            WHEN s_clk_high => 
               IF (counter < 1) THEN 
                  counter <= counter + 1;
               END IF;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      counter,
      current_state,
      transmit
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN init => 
            next_state <= keep_ready;
         WHEN keep_ready => 
            IF (transmit = '0') THEN 
               next_state <= keep_ready;
            ELSIF (transmit = '1') THEN 
               next_state <= capture_bit_in;
            ELSE
               next_state <= keep_ready;
            END IF;
         WHEN capture_bit_in => 
            next_state <= s_clk_low;
         WHEN s_clk_low => 
            IF (counter < 1) THEN 
               next_state <= s_clk_low;
            ELSIF (counter = 1) THEN 
               next_state <= s_clk_high;
            ELSE
               next_state <= s_clk_low;
            END IF;
         WHEN s_clk_high => 
            IF (counter < 1) THEN 
               next_state <= s_clk_high;
            ELSIF (counter = 1) THEN 
               next_state <= init;
            ELSE
               next_state <= s_clk_high;
            END IF;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      bit_in,
      counter,
      current_state,
      transmit
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      ready_int <= '1';
      s_clk_int <= '0';
      s_sda_int <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN init => 
            ready_int <= '1';
         WHEN keep_ready => 
            IF (transmit = '0') THEN 
            ELSIF (transmit = '1') THEN 
               ready_int <= '0';
               s_sda_int <= bit_in;
               s_clk_int <= '1';
            END IF;
         WHEN capture_bit_in => 
            s_sda_int <= '0';
            s_clk_int <= '0';
            ready_int <= '1';
         WHEN s_clk_low => 
            IF (counter < 1) THEN 
            ELSIF (counter = 1) THEN 
               s_clk_int <= '0';
            END IF;
         WHEN s_clk_high => 
            IF (counter < 1) THEN 
            ELSIF (counter = 1) THEN 
               ready_int <= '1';
               s_clk_int <= '0';
               s_sda_int <= '0';
            END IF;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
