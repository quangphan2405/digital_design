-- VHDL Entity alien_game_lib.c5_t1_shield_gamma.symbol
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 16:36:43 05/29/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c5_t1_shield_gamma IS
   PORT( 
      clk      : IN     std_logic;
      rst      : IN     std_logic;
      rx_rdy   : IN     std_logic;
      bit_out  : OUT    std_logic;
      lat      : OUT    std_logic;
      sb       : OUT    std_logic;
      transmit : OUT    std_logic
   );

-- Declarations

END c5_t1_shield_gamma ;

--
-- VHDL Architecture alien_game_lib.c5_t1_shield_gamma.fsm
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 16:36:43 05/29/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c5_t1_shield_gamma IS

   TYPE STATE_TYPE IS (
      init,
      bit0,
      bit1,
      bit2,
      bit3,
      bit4,
      bit5,
      bit6,
      bit7,
      bit8,
      bit9,
      bit10,
      bit11,
      bit12,
      bit13,
      bit14,
      bit15,
      bit16,
      bit17,
      bit18,
      bit19,
      bit20,
      bit21,
      bit22,
      bit23,
      set_lat,
      set_sb
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL bit_out_int : std_logic ;
   SIGNAL lat_int : std_logic ;
   SIGNAL sb_int : std_logic ;
   SIGNAL transmit_int : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= init;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         -- Registered output assignments
         bit_out <= bit_out_int;
         lat <= lat_int;
         sb <= sb_int;
         transmit <= transmit_int;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      rx_rdy
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN init => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit0;
            ELSIF (rx_rdy = '0') THEN 
               next_state <= init;
            ELSE
               next_state <= init;
            END IF;
         WHEN bit0 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit1;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit0;
            ELSE
               next_state <= bit0;
            END IF;
         WHEN bit1 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit2;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit1;
            ELSE
               next_state <= bit1;
            END IF;
         WHEN bit2 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit3;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit2;
            ELSE
               next_state <= bit2;
            END IF;
         WHEN bit3 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit4;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit3;
            ELSE
               next_state <= bit3;
            END IF;
         WHEN bit4 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit5;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit4;
            ELSE
               next_state <= bit4;
            END IF;
         WHEN bit5 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit6;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit5;
            ELSE
               next_state <= bit5;
            END IF;
         WHEN bit6 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit7;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit6;
            ELSE
               next_state <= bit6;
            END IF;
         WHEN bit7 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit8;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit7;
            ELSE
               next_state <= bit7;
            END IF;
         WHEN bit8 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit9;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit8;
            ELSE
               next_state <= bit8;
            END IF;
         WHEN bit9 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit10;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit9;
            ELSE
               next_state <= bit9;
            END IF;
         WHEN bit10 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit11;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit10;
            ELSE
               next_state <= bit10;
            END IF;
         WHEN bit11 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit12;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit11;
            ELSE
               next_state <= bit11;
            END IF;
         WHEN bit12 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit13;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit12;
            ELSE
               next_state <= bit12;
            END IF;
         WHEN bit13 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit14;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit13;
            ELSE
               next_state <= bit13;
            END IF;
         WHEN bit14 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit15;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit14;
            ELSE
               next_state <= bit14;
            END IF;
         WHEN bit15 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit16;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit15;
            ELSE
               next_state <= bit15;
            END IF;
         WHEN bit16 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit17;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit16;
            ELSE
               next_state <= bit16;
            END IF;
         WHEN bit17 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit18;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit17;
            ELSE
               next_state <= bit17;
            END IF;
         WHEN bit18 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit19;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit18;
            ELSE
               next_state <= bit18;
            END IF;
         WHEN bit19 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit20;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit19;
            ELSE
               next_state <= bit19;
            END IF;
         WHEN bit20 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit21;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit20;
            ELSE
               next_state <= bit20;
            END IF;
         WHEN bit21 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit22;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit21;
            ELSE
               next_state <= bit21;
            END IF;
         WHEN bit22 => 
            IF (rx_rdy <= '1') THEN 
               next_state <= bit23;
            ELSIF (rx_rdy <= '0') THEN 
               next_state <= bit22;
            ELSE
               next_state <= bit22;
            END IF;
         WHEN bit23 => 
            IF (rx_rdy <= '0') THEN 
               next_state <= bit23;
            ELSE
               next_state <= set_lat;
            END IF;
         WHEN set_lat => 
            next_state <= set_sb;
         WHEN set_sb => 
            next_state <= init;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      bit_out_int <= '0';
      lat_int <= '0';
      sb_int <= '0';
      transmit_int <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN bit0 => 
            bit_out_int <= '0';
         WHEN bit1 => 
            bit_out_int <= '0';
         WHEN bit2 => 
            bit_out_int <= '0';
         WHEN bit3 => 
            bit_out_int <= '1';
         WHEN bit4 => 
            bit_out_int <= '0';
         WHEN bit5 => 
            bit_out_int <= '1';
         WHEN bit6 => 
            bit_out_int <= '0';
         WHEN bit7 => 
            bit_out_int <= '0';
         WHEN bit8 => 
            bit_out_int <= '0';
         WHEN bit9 => 
            bit_out_int <= '1';
         WHEN bit10 => 
            bit_out_int <= '1';
         WHEN bit11 => 
            bit_out_int <= '0';
         WHEN bit12 => 
            bit_out_int <= '0';
         WHEN bit13 => 
            bit_out_int <= '0';
         WHEN bit14 => 
            bit_out_int <= '1';
         WHEN bit15 => 
            bit_out_int <= '1';
         WHEN bit16 => 
            bit_out_int <= '0';
         WHEN bit17 => 
            bit_out_int <= '1';
         WHEN bit18 => 
            bit_out_int <= '0';
         WHEN bit19 => 
            bit_out_int <= '1';
         WHEN bit20 => 
            bit_out_int <= '1';
         WHEN bit21 => 
            bit_out_int <= '0';
         WHEN bit22 => 
            bit_out_int <= '0';
         WHEN bit23 => 
            bit_out_int <= '1';
         WHEN set_lat => 
            lat_int <= '1';
         WHEN set_sb => 
            lat_int <= '0';
            sb_int <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
