-- VHDL Entity alien_game_lib.c4_t3_hit_controller.symbol
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 22:04:41 06/ 4/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c4_t3_hit_controller IS
   PORT( 
      clk      : IN     std_logic;
      hit      : IN     std_logic;
      rst_n    : IN     std_logic;
      defeated : OUT    std_logic;
      hit_once : OUT    std_logic
   );

-- Declarations

END c4_t3_hit_controller ;

--
-- VHDL Architecture alien_game_lib.c4_t3_hit_controller.fsm
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 22:04:41 06/ 4/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c4_t3_hit_controller IS

   TYPE STATE_TYPE IS (
      init,
      once,
      s0
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL defeated_cld : std_logic ;
   SIGNAL hit_once_cld : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= init;
         -- Default Reset Values
         defeated_cld <= '0';
         hit_once_cld <= '0';
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;

         -- Combined Actions
         CASE current_state IS
            WHEN init => 
               IF (hit = '1') THEN 
                  hit_once_cld <= '1';
               END IF;
            WHEN once => 
               IF (hit = '0') THEN 
               ELSIF (hit = '1') THEN 
                  hit_once_cld <= '0';
                  defeated_cld <= '1';
               END IF;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      current_state,
      hit
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN init => 
            IF (hit = '1') THEN 
               next_state <= once;
            ELSIF (hit = '0') THEN 
               next_state <= init;
            ELSE
               next_state <= init;
            END IF;
         WHEN once => 
            IF (hit = '0') THEN 
               next_state <= once;
            ELSIF (hit = '1') THEN 
               next_state <= s0;
            ELSE
               next_state <= once;
            END IF;
         WHEN s0 => 
            next_state <= s0;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -- Concurrent Statements
   -- Clocked output assignments
   defeated <= defeated_cld;
   hit_once <= hit_once_cld;
END fsm;
