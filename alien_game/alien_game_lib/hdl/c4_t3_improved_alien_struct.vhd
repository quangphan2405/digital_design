-- VHDL Entity alien_game_lib.c4_t3_improved_alien.symbol
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 16:46:40 05/28/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c4_t3_improved_alien IS
   PORT( 
      clk         : IN     std_logic;
      enable      : IN     std_logic;
      hit         : IN     std_logic;
      rst_n       : IN     std_logic;
      alien_color : OUT    std_logic_vector (23 DOWNTO 0);
      x_coord     : OUT    std_logic_vector (7 DOWNTO 0);
      y_coord     : OUT    std_logic_vector (7 DOWNTO 0)
   );

-- Declarations

END c4_t3_improved_alien ;

--
-- VHDL Architecture alien_game_lib.c4_t3_improved_alien.struct
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 16:46:40 05/28/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY alien_game_lib;

ARCHITECTURE struct OF c4_t3_improved_alien IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL cnt           : std_logic;
   SIGNAL color         : std_logic_vector(23 DOWNTO 0);
   SIGNAL dead          : std_logic;
   SIGNAL dead_red      : std_logic_vector(23 DOWNTO 0);
   SIGNAL dir           : std_logic;
   SIGNAL dout          : std_logic;
   SIGNAL dout2         : std_logic_vector(7 DOWNTO 0);
   SIGNAL last_dir      : std_logic;
   SIGNAL qb            : std_logic;
   SIGNAL shift_or_not  : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_left_shift  : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_right_shift : std_logic_vector(7 DOWNTO 0);
   SIGNAL x_shifted     : std_logic_vector(7 DOWNTO 0);

   -- Implicit buffer signal declarations
   SIGNAL alien_color_internal : std_logic_vector (23 DOWNTO 0);
   SIGNAL x_coord_internal     : std_logic_vector (7 DOWNTO 0);


   -- ModuleWare signal declarations(v1.12) for instance 'U_0' of 'adff'
   SIGNAL mw_U_0reg_cval : std_logic_vector(7 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_5' of 'adff'
   SIGNAL mw_U_5reg_cval : std_logic;

   -- ModuleWare signal declarations(v1.12) for instance 'U_8' of 'adff'
   SIGNAL mw_U_8reg_cval : std_logic_vector(23 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_9' of 'adff'
   SIGNAL mw_U_9reg_cval : std_logic_vector(7 DOWNTO 0);

   -- ModuleWare signal declarations(v1.12) for instance 'U_10' of 'adff'
   SIGNAL mw_U_10reg_cval : std_logic;

   -- Component Declarations
   COMPONENT c2_t3_left_shifter
   PORT (
      data_in  : IN     std_logic_vector (7 DOWNTO 0);
      data_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c2_t4_right_shifter
   PORT (
      data_in  : IN     std_logic_vector (7 DOWNTO 0);
      data_out : OUT    std_logic_vector (7 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT c2_t7_shift_direction
   PORT (
      last_dir : IN     std_logic ;
      x_coord  : IN     std_logic_vector (7 DOWNTO 0);
      dir      : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : c2_t3_left_shifter USE ENTITY alien_game_lib.c2_t3_left_shifter;
   FOR ALL : c2_t4_right_shifter USE ENTITY alien_game_lib.c2_t4_right_shifter;
   FOR ALL : c2_t7_shift_direction USE ENTITY alien_game_lib.c2_t7_shift_direction;
   -- pragma synthesis_on


BEGIN

   -- ModuleWare code(v1.12) for instance 'U_0' of 'adff'
   x_coord_internal <= mw_U_0reg_cval;
   u_0seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_0reg_cval <= "00100000";
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_0reg_cval <= shift_or_not;
      END IF;
   END PROCESS u_0seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_5' of 'adff'
   last_dir <= mw_U_5reg_cval;
   u_5seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_5reg_cval <= '1';
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_5reg_cval <= dir;
      END IF;
   END PROCESS u_5seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_8' of 'adff'
   alien_color_internal <= mw_U_8reg_cval;
   u_8seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_8reg_cval <= "000000000000000011001111";
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_8reg_cval <= color;
      END IF;
   END PROCESS u_8seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_9' of 'adff'
   y_coord <= mw_U_9reg_cval;
   u_9seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_9reg_cval <= "00000001";
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_9reg_cval <= dout2;
      END IF;
   END PROCESS u_9seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_10' of 'adff'
   cnt <= mw_U_10reg_cval;
   qb <= NOT(mw_U_10reg_cval);
   u_10seq_proc: PROCESS (clk, rst_n)
   BEGIN
      IF (rst_n = '0') THEN
         mw_U_10reg_cval <= '0';
      ELSIF (clk'EVENT AND clk='1') THEN
         mw_U_10reg_cval <= dout;
      END IF;
   END PROCESS u_10seq_proc;

   -- ModuleWare code(v1.12) for instance 'U_1' of 'and'
   dead <= hit AND cnt;

   -- ModuleWare code(v1.12) for instance 'U_11' of 'and'
   dout <= hit AND qb;

   -- ModuleWare code(v1.12) for instance 'red' of 'constval'
   dead_red <= "111111110000000000000000";

   -- ModuleWare code(v1.12) for instance 'y_default' of 'constval'
   dout2 <= "00000001";

   -- ModuleWare code(v1.12) for instance 'U_6' of 'mux'
   u_6combo_proc: PROCESS(alien_color_internal, dead_red, dead)
   BEGIN
      CASE dead IS
      WHEN '0' => color <= alien_color_internal;
      WHEN '1' => color <= dead_red;
      WHEN OTHERS => color <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_6combo_proc;

   -- ModuleWare code(v1.12) for instance 'U_7' of 'mux'
   u_7combo_proc: PROCESS(x_coord_internal, x_shifted, enable)
   BEGIN
      CASE enable IS
      WHEN '0' => shift_or_not <= x_coord_internal;
      WHEN '1' => shift_or_not <= x_shifted;
      WHEN OTHERS => shift_or_not <= (OTHERS => 'X');
      END CASE;
   END PROCESS u_7combo_proc;

   -- ModuleWare code(v1.12) for instance 'l_or_r' of 'mux'
   l_or_rcombo_proc: PROCESS(x_right_shift, x_left_shift, last_dir)
   BEGIN
      CASE last_dir IS
      WHEN '0' => x_shifted <= x_right_shift;
      WHEN '1' => x_shifted <= x_left_shift;
      WHEN OTHERS => x_shifted <= (OTHERS => 'X');
      END CASE;
   END PROCESS l_or_rcombo_proc;

   -- Instance port mappings.
   U_3 : c2_t3_left_shifter
      PORT MAP (
         data_in  => x_coord_internal,
         data_out => x_left_shift
      );
   U_4 : c2_t4_right_shifter
      PORT MAP (
         data_in  => x_coord_internal,
         data_out => x_right_shift
      );
   U_2 : c2_t7_shift_direction
      PORT MAP (
         last_dir => last_dir,
         x_coord  => x_coord_internal,
         dir      => dir
      );

   -- Implicit buffered output assignments
   alien_color <= alien_color_internal;
   x_coord     <= x_coord_internal;

END struct;
