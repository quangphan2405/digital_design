-- VHDL Entity alien_game_lib.c3_t2_write_seq.symbol
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 20:26:41 05/30/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c3_t2_write_seq IS
   PORT( 
      clk           : IN     std_logic;
      rst_n         : IN     std_logic;
      write_ready   : IN     std_logic;
      enable        : OUT    std_logic;
      frame_done    : OUT    std_logic;
      gun_px_idx    : OUT    std_logic_vector (1 DOWNTO 0);
      module_select : OUT    std_logic_vector (1 DOWNTO 0);
      write         : OUT    std_logic
   );

-- Declarations

END c3_t2_write_seq ;

--
-- VHDL Architecture alien_game_lib.c3_t2_write_seq.fsm
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 20:26:41 05/30/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c3_t2_write_seq IS

   -- Architecture Declarations
   SIGNAL counter : integer RANGE 1 DOWNTO 0;  

   TYPE STATE_TYPE IS (
      init,
      write_alien,
      gun_00,
      gun_01,
      gun_10,
      gun_11,
      w_done,
      en
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL enable_int : std_logic ;
   SIGNAL frame_done_int : std_logic ;
   SIGNAL gun_px_idx_int : std_logic_vector (1 DOWNTO 0);
   SIGNAL module_select_int : std_logic_vector (1 DOWNTO 0);
   SIGNAL write_int : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= init;
         -- Default Reset Values
         enable <= '0';
         frame_done <= '0';
         gun_px_idx <= "00";
         module_select <= "00";
         write <= '0';
         counter <= 0;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         -- Registered output assignments
         enable <= enable_int;
         frame_done <= frame_done_int;
         gun_px_idx <= gun_px_idx_int;
         module_select <= module_select_int;
         write <= write_int;
         -- Default Assignment To Internals
         counter <= 0;

         -- Combined Actions
         CASE current_state IS
            WHEN write_alien => 
               IF (counter < 1) THEN 
                  counter <= counter + 1;
               ELSIF (counter = 1 AND write_ready = '1') THEN 
                  counter <= 0;
               END IF;
            WHEN gun_11 => 
               IF (counter < 1) THEN 
                  counter <= counter + 1;
               END IF;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      counter,
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN init => 
            IF (write_ready = '1') THEN 
               next_state <= write_alien;
            ELSIF (write_ready = '0') THEN 
               next_state <= init;
            ELSE
               next_state <= init;
            END IF;
         WHEN write_alien => 
            IF (counter < 1) THEN 
               next_state <= write_alien;
            ELSIF (counter = 1 AND write_ready = '1') THEN 
               next_state <= gun_00;
            ELSIF (counter = 1 AND write_ready = '0') THEN 
               next_state <= write_alien;
            ELSE
               next_state <= write_alien;
            END IF;
         WHEN gun_00 => 
            IF (write_ready = '0') THEN 
               next_state <= gun_00;
            ELSIF (write_ready = '1') THEN 
               next_state <= gun_01;
            ELSE
               next_state <= gun_00;
            END IF;
         WHEN gun_01 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_10;
            ELSIF (write_ready = '0') THEN 
               next_state <= gun_01;
            ELSE
               next_state <= gun_01;
            END IF;
         WHEN gun_10 => 
            IF (write_ready = '1') THEN 
               next_state <= gun_11;
            ELSIF (write_ready = '0') THEN 
               next_state <= gun_10;
            ELSE
               next_state <= gun_10;
            END IF;
         WHEN gun_11 => 
            IF (counter < 1) THEN 
               next_state <= gun_11;
            ELSE
               next_state <= w_done;
            END IF;
         WHEN w_done => 
            next_state <= en;
         WHEN en => 
            next_state <= init;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      counter,
      current_state,
      write_ready
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      enable_int <= '0';
      frame_done_int <= '0';
      gun_px_idx_int <= "00";
      module_select_int <= "00";
      write_int <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN init => 
            IF (write_ready = '1') THEN 
               write_int <= '1';
               module_select_int <= "00";
               gun_px_idx_int <= "00";
            END IF;
         WHEN write_alien => 
            IF (counter < 1) THEN 
               write_int <= '0';
               module_select_int <= "01";
            ELSIF (counter = 1 AND write_ready = '1') THEN 
               module_select_int <= "01";
               gun_px_idx_int <= "00";
               write_int <= '1';
            END IF;
         WHEN gun_00 => 
            IF (write_ready = '0') THEN 
            ELSIF (write_ready = '1') THEN 
               module_select_int <= "01";
               gun_px_idx_int <= "01";
            END IF;
         WHEN gun_01 => 
            IF (write_ready = '1') THEN 
               module_select_int <= "01";
               gun_px_idx_int <= "10";
            END IF;
         WHEN gun_10 => 
            IF (write_ready = '1') THEN 
               module_select_int <= "01";
               gun_px_idx_int <= "11";
            END IF;
         WHEN gun_11 => 
            IF (counter < 1) THEN 
               module_select_int <= "00";
               gun_px_idx_int <= "00";
               write_int <= '0';
            ELSE
               frame_done_int <= '1';
            END IF;
         WHEN w_done => 
            frame_done_int <= '0';
            enable_int <= '1';
         WHEN en => 
            frame_done_int <= '0';
            enable_int <= '0';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
