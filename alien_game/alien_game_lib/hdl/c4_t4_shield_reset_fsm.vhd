-- VHDL Entity alien_game_lib.c4_t4_shield_reset.symbol
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 21:55:03 05/28/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY c4_t4_shield_reset IS
   PORT( 
      clk   : IN     std_logic;
      rst_n : IN     std_logic;
      done  : OUT    std_logic;
      s_rst : OUT    std_logic
   );

-- Declarations

END c4_t4_shield_reset ;

--
-- VHDL Architecture alien_game_lib.c4_t4_shield_reset.fsm
--
-- Created:
--          by - USER.UNKNOWN (QUANG-PHAN)
--          at - 21:55:03 05/28/2020
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2019.3 (Build 4)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF c4_t4_shield_reset IS

   -- Architecture Declarations
   SIGNAL counter : integer RANGE 4 DOWNTO 0;  

   TYPE STATE_TYPE IS (
      init,
      wait_5_cycles,
      reset_finish,
      send_done
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

   -- Declare any pre-registered internal signals
   SIGNAL done_int : std_logic ;
   SIGNAL s_rst_int : std_logic ;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst_n
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst_n = '0') THEN
         current_state <= init;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
         -- Registered output assignments
         done <= done_int;
         s_rst <= s_rst_int;
         -- Default Assignment To Internals
         counter <= 0;

         -- Combined Actions
         CASE current_state IS
            WHEN wait_5_cycles => 
               IF (counter < 4) THEN 
                  counter <= counter + 1;
               ELSIF (counter = 4) THEN 
                  counter <= 0;
               END IF;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      counter,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN init => 
            next_state <= wait_5_cycles;
         WHEN wait_5_cycles => 
            IF (counter < 4) THEN 
               next_state <= wait_5_cycles;
            ELSIF (counter = 4) THEN 
               next_state <= reset_finish;
            ELSE
               next_state <= wait_5_cycles;
            END IF;
         WHEN reset_finish => 
            next_state <= send_done;
         WHEN send_done => 
            next_state <= send_done;
         WHEN OTHERS =>
            next_state <= init;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      counter,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      done_int <= '0';
      s_rst_int <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN init => 
            s_rst_int <= '0';
            done_int <= '0';
         WHEN wait_5_cycles => 
            IF (counter < 4) THEN 
            ELSIF (counter = 4) THEN 
               s_rst_int <= '1';
            END IF;
         WHEN reset_finish => 
            done_int <= '1';
            s_rst_int <= '1';
         WHEN send_done => 
            done_int <= '0';
            s_rst_int <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
